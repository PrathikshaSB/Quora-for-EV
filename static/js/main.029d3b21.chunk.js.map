{"version":3,"sources":["firebase.js","features/questionSlice.js","features/userSlice.js","component/Post.js","component/QuoraBox.js","component/Feed.js","component/auth/logo.png","component/Navbar.js","component/Quora.js","component/auth/Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["firebaseApp","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","db","GoogleAuthProvider","firestore","questionSlice","createSlice","name","initialState","questionId","questionName","reducers","setQuestionInfo","state","action","payload","actions","selectQuestionId","question","selectQuestionName","userSlice","user","login","logout","selectUser","Modal","setAppElement","Post","Id","image","timestamp","quoraUser","useSelector","useState","openModal","setOpenModal","dispatch","useDispatch","answer","setAnswer","getAnswer","setGetAnswer","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","id","answers","data","className","onClick","Avatar","src","photo","displayName","email","Date","toDate","toLocaleString","isOpen","onRequestClose","shouldCloseOnOverlayClick","style","overlay","width","height","backgroundColor","zIndex","top","left","marginTop","marginLeft","value","required","onChange","e","target","placeholder","type","preventDefault","add","FieldValue","serverTimestamp","console","log","position","paddingBottom","color","fontSize","display","right","marginBottom","alt","ShareOutlined","MoreHorizOutlined","QuoraBox","Feed","posts","setPosts","imageUrl","Navbar","input","setInput","inputUrl","setInputUrl","inputC","setInputC","contactModal","setContactModal","logo","Button","signOut","displaName","ExpandMore","Input","window","alert","feedback","Quora","Login","setEmail","password","setPassword","signInWithEmailAndPassword","then","catch","message","createUserWithEmailAndPassword","App","onAuthStateChanged","authUser","uid","photoURL","store","configureStore","reducer","userReducer","questionReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.029d3b21.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBQpO12durEOknKwWIrNQoNEG1sJJRoc3s\",\r\n    authDomain: \"quora-for-ev-6fbd8.firebaseapp.com\",\r\n    projectId: \"quora-for-ev-6fbd8\",\r\n    storageBucket: \"quora-for-ev-6fbd8.appspot.com\",\r\n    messagingSenderId: \"391561599213\",\r\n    appId: \"1:391561599213:web:532abf62f90fd896d9d4e4\"\r\n  };\r\n\r\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\r\n  const auth = firebase.auth();\r\n  const provider = new firebase.auth.GoogleAuthProvider();\r\n  const db = firebaseApp.firestore();\r\n\r\nexport {auth,provider};\r\nexport default db;","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const questionSlice = createSlice({\r\n  name: \"question\",\r\n  initialState: {\r\n    questionId: null,\r\n    questionName: null\r\n  },\r\n  reducers: {\r\n    setQuestionInfo: (state,action) => {\r\n        state.questionId=action.payload.questionId\r\n        state.questionName=action.payload.questionName\r\n    }\r\n  },\r\n});\r\n\r\nexport const { setQuestionInfo } = questionSlice.actions;\r\n\r\nexport const selectQuestionId = (state) => state.question.questionId;\r\nexport const selectQuestionName = (state) => state.question.questionName;\r\n\r\nexport default questionSlice.reducer;","import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    user: null,\n  },\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: (state) => {\n      state.user = null;\n    },\n  },\n});\n\nexport const { login, logout } = userSlice.actions;\n\nexport const selectUser = (state) => state.user.user;\n\nexport default userSlice.reducer;","import { Avatar } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport '../css/Post.css';\r\nimport ArrowUpwardOutlinedIcon from \"@material-ui/icons/ArrowUpwardOutlined\";\r\nimport ArrowDownwardOutlinedIcon from \"@material-ui/icons/ArrowDownwardOutlined\";\r\nimport RepeatOutlinedIcon from \"@material-ui/icons/RepeatOutlined\";\r\nimport ChatBubbleOutlineOutlinedIcon from \"@material-ui/icons/ChatBubbleOutlineOutlined\";\r\nimport { MoreHorizOutlined, ShareOutlined } from \"@material-ui/icons\";\r\nimport Modal from 'react-modal';\r\nimport { selectQuestionId, selectQuestionName, setQuestionInfo } from '../features/questionSlice';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectUser } from \"../features/userSlice\";\r\nimport db from \"../firebase\";\r\nimport firebase from \"firebase\";\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\nfunction Post( {Id,question,image,timestamp,quoraUser} ) {\r\n\r\n    const user=useSelector(selectUser)\r\n    const [openModal, setOpenModal] = useState(false)\r\n    const dispatch = useDispatch()\r\n    const questionId = useSelector(selectQuestionId);\r\n    const questionName = useSelector(selectQuestionName);\r\n    const [answer, setAnswer] = useState(\"\");\r\n    const [getAnswer, setGetAnswer] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if(questionId){\r\n            db.collection('questions').doc(questionId).collection('answer').orderBy(\"timestamp\", 'desc').onSnapshot(snapshot => setGetAnswer(snapshot.docs.map((doc)=> ({\r\n                id: doc.id,\r\n                answers:doc.data()\r\n            }))))\r\n        }\r\n    })\r\n\r\n    const handleAnswer = (e) => {\r\n        e.preventDefault();\r\n    \r\n        if (questionId) {\r\n          db.collection(\"questions\").doc(questionId).collection(\"answer\").add({\r\n            answer: answer,\r\n            user: user,\r\n            questionId: questionId,\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n          });\r\n        }\r\n        console.log(questionId, questionName);\r\n        setAnswer(\"\");\r\n        setOpenModal(false);\r\n      };\r\n\r\n    return (\r\n        <div className='post'\r\n            onClick={() => dispatch(setQuestionInfo({\r\n                questionId: Id,\r\n                questionName: question\r\n            }))}\r\n        >\r\n            <div className='post_info'>\r\n                <Avatar src={quoraUser.photo}/>\r\n                <h5>{quoraUser.displayName?quoraUser.displayName:quoraUser.email}</h5>\r\n                <small>{new Date(timestamp?.toDate()).toLocaleString()}</small>\r\n            </div>\r\n            <div className='post_body'>\r\n                <div className='post_question'>\r\n                    <p>{question}</p>\r\n                    <button onClick={() => setOpenModal(true)} className='post_btnAnswer'>Answer</button>\r\n                    <Modal\r\n                    isOpen={openModal}\r\n                    onRequestClose = {() => setOpenModal(false)}\r\n                    shouldCloseOnOverlayClick={false}\r\n                    style={{\r\n                        overlay:{\r\n                            width:700,\r\n                            height:600,\r\n                            backgroundColor:\"rgba(0,0,0,0.8)\",\r\n                            zIndex:\"1000\",\r\n                            top:\"50%\",\r\n                            left:\"50%\",\r\n                            marginTop:\"-300px\",\r\n                            marginLeft:\"-350px\",\r\n                        },\r\n                    }}\r\n                ><div className=\"modal_question\">\r\n                <h1>{question}</h1>\r\n                <p>\r\n                  asked by{\" \"}\r\n                  <span className=\"name\">\r\n                    {quoraUser.displayName ? quoraUser.displayName : quoraUser.email}\r\n                  </span>{\" \"}{\"\"}on{\" \"}\r\n                  <span className=\"name\">\r\n                    {new Date(timestamp?.toDate()).toLocaleString()}\r\n                  </span>\r\n                </p>\r\n              </div>\r\n              <div className=\"modal_answer\">\r\n                <textarea\r\n                  value={answer}\r\n                  required\r\n                  onChange={(e) => setAnswer(e.target.value)}\r\n                  placeholder=\"Enter Your Answer\"\r\n                  type=\"text\"\r\n                />\r\n              </div>\r\n              <div className=\"modal_button\">\r\n                <button className=\"cancle\" onClick={() => setOpenModal(false)}>\r\n                  Cancel\r\n                </button>\r\n                <button type=\"sumbit\" onClick={handleAnswer} className=\"add\">\r\n                  Add Answer\r\n                </button>\r\n              </div>\r\n                </Modal>\r\n                </div>\r\n                <div className='post_answer'>\r\n                  {getAnswer.map(({ id, answers }) => (\r\n                    <p key={id} style={{ position: \"relative\", paddingBottom: \"5px\" }}>\r\n                      {Id === answers.questionId ? (\r\n                        <span><br />\r\n                          {answers.answer}\r\n                          <br />\r\n                          <span style={{position: \"absolute\", color: \"gray\", fontSize: \"small\", display: \"flex\", right: \"0px\", marginBottom: \"10px\",}}>\r\n                            <span style={{ color: \"#b92b27\" }}>answered by &nbsp;\r\n                              {answers.user.displayName ? answers.user.displayName : answers.user.email}{\" \"}\r\n                              on{\" \"}\r\n                              {new Date(answers.timestamp?.toDate()).toLocaleString()}\r\n                            </span><br/>\r\n                          </span>\r\n                        </span>\r\n                      ) : ( \"\" )}\r\n                    </p>\r\n                  ))}\r\n                </div><br/>\r\n                <img src={image} alt=''/>\r\n            </div>\r\n            {/* <br/><br/> */}\r\n            <div className='post_footer'>\r\n                <div className='post_footerAction'>\r\n                    <ArrowUpwardOutlinedIcon />\r\n                    <ArrowDownwardOutlinedIcon />\r\n                </div>\r\n                <RepeatOutlinedIcon />\r\n                <ChatBubbleOutlineOutlinedIcon />\r\n                <div className=\"post_footerLeft\">\r\n                    <ShareOutlined />\r\n                    <MoreHorizOutlined />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post\r\n","import React from 'react';\r\nimport { Avatar, Button, Input } from \"@material-ui/core\";\r\nimport '../css/QuoraBox.css';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from '../features/userSlice';\r\n\r\nfunction QuoraBox() {\r\n    const user=useSelector(selectUser)\r\n    return (\r\n        <div className=\"quoraBox\">\r\n            <div className='quoraBox_info'>\r\n                <Avatar \r\n                src={user.photo}\r\n                />\r\n                <h5>{user.email}</h5>\r\n            </div>\r\n            <div className='quoraBox_quora'>\r\n                <p>Welcome {user.email}!</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QuoraBox;\r\n","import React, { useEffect, useState } from 'react';\r\nimport '../css/Feed.css';\r\nimport db from '../firebase';\r\nimport Post from './Post';\r\nimport QuoraBox from './QuoraBox';\r\n\r\nfunction Feed() {\r\n\r\n    const [posts, setPosts] = useState([])\r\n\r\n    useEffect(() => {\r\n        db.collection('questions').orderBy('timestamp', \"desc\").onSnapshot(snapshot => setPosts(snapshot.docs.map((docs)=>(({\r\n            id:docs.id,\r\n            question:docs.data()\r\n        })) )))\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"feed\">\r\n            <QuoraBox/>\r\n            {\r\n                posts.map(({ id, question}) => (\r\n                    <Post \r\n                        key = {id}\r\n                        Id={id}\r\n                        image={question.imageUrl}\r\n                        question={question.question}\r\n                        timestamp={question.timestamp}\r\n                        quoraUser={question.user}\r\n                    />\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Feed;\r\n","export default __webpack_public_path__ + \"static/media/logo.cbfeb205.png\";","import React, { useState } from 'react';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport PeopleAltOutlinedIcon from \"@material-ui/icons/PeopleAltOutlined\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport '../css/Navbar.css';\r\nimport { Avatar, Button, Input, Link } from \"@material-ui/core\";\r\nimport { useSelector, useStore } from 'react-redux';\r\nimport { selectUser } from '../features/userSlice';\r\nimport db, { auth } from '../firebase';\r\nimport Modal from \"react-modal\";\r\nimport { ExpandMore } from '@material-ui/icons';\r\nimport LinkIcon from '@material-ui/icons/Link';\r\nimport firebase from 'firebase';\r\nimport logo from './auth/logo.png';\r\n\r\nfunction Navbar() {\r\n\r\n    const user = useSelector(selectUser);\r\n    const [openModal, setOpenModal] = useState(false);\r\n    const [input, setInput] =useState(\"\");\r\n    const [inputUrl, setInputUrl]=useState(\"\");\r\n    const [inputC, setInputC]=useState(\"\");\r\n    const [contactModal, setContactModal]=useState(false);\r\n\r\n    const handleQuestion =(e)  => {\r\n        e.preventDefault();\r\n\r\n        setOpenModal(false)\r\n\r\n        db.collection('questions').add({\r\n            question: input,\r\n            imageUrl: inputUrl,\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n            user: user,\r\n        })\r\n        setInput(\"\");\r\n        setInputUrl(\"\");\r\n    }\r\n\r\n    const handleContact =(e) =>{\r\n        e.preventDefault();\r\n        setContactModal(false);\r\n\r\n        if(inputC===\"\"){\r\n            window.alert(\"Please give some feedback...\");\r\n            setContactModal(true);\r\n        }else{\r\n            db.collection('contact').add({\r\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                user: user,\r\n                feedback: inputC,\r\n            })\r\n            setInputC(\"\");\r\n            window.alert(\"Feedback sent! That means a lot! Thank you!\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='qHeader'>\r\n            <div className=\"qHeader_logo\">\r\n                <img\r\n                    src={logo} alt='logo'\r\n                />\r\n            </div>\r\n            <div className=\"qHeader_icons\">\r\n                <div className=\"qHeader_icon\">\r\n                <HomeIcon />\r\n                </div>\r\n            </div>\r\n            <div className=\"qHeader_input\">\r\n                <SearchIcon />\r\n                <input type=\"text\" placeholder=\"Search Quora\" />\r\n            </div>\r\n            <div className=\"qHeader_Rem\">\r\n                <Button onClick={() => setOpenModal(true)}>Add Question</Button>\r\n                <Button onClick={() => setContactModal(true)}>Contact Us!</Button>\r\n                <Button onClick={() => auth.signOut()}>Logout</Button>\r\n                <Modal\r\n                    isOpen={openModal}\r\n                    onRequestClose = {() => setOpenModal(false)}\r\n                    shouldCloseOnOverlayClick={false}\r\n                    style={{\r\n                        overlay:{\r\n                            width:700,\r\n                            height:600,\r\n                            backgroundColor:\"rgba(0,0,0,0.8)\",\r\n                            zIndex:\"1000\",\r\n                            top:\"50%\",\r\n                            left:\"50%\",\r\n                            marginTop:\"-300px\",\r\n                            marginLeft:\"-350px\",\r\n                        },\r\n                    }}\r\n                >\r\n                    <div className=\"modal_title\">\r\n                        <h5>Add Question</h5>\r\n                        <h5>Share link</h5>\r\n                        </div>\r\n                        <div className=\"modal_info\">\r\n                            <Avatar className=\"avatar\" src={user.photo}/>\r\n                            <p>{user.displaName ? user.displaName : user.email} asked</p>\r\n                            <div className=\"modal_scope\">\r\n                                <PeopleAltOutlinedIcon />\r\n                                <p>Public</p>\r\n                                <ExpandMore/>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"modal_Field\">\r\n                            <Input\r\n                                value={input}\r\n                                required\r\n                                onChange={(e) => setInput(e.target.value)}\r\n                                type=\"text\"\r\n                                placeholder=\"Start your question with 'What', 'How' and 'Why' stc..\"\r\n                            />\r\n                        <div className=\"modal_fieldLink\">\r\n                            <LinkIcon/>\r\n                            <input\r\n                                value={inputUrl}\r\n                                onChange={(e) => setInputUrl(e.target.value)}\r\n                                type=\"text\"\r\n                                placeholder=\"Optional: include a link that gives context\"\r\n                            ></input>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"modal_buttons\">\r\n                        <button onClick={() => setOpenModal(false)} className=\"cancle\">Close</button>\r\n                        <button onClick={handleQuestion} type=\"submit\" className=\"add\">Add Question</button>\r\n                    </div>\r\n                </Modal>\r\n\r\n                <Modal\r\n                    isOpen={contactModal}\r\n                    onRequestClose = {() => setContactModal(false)}\r\n                    shouldCloseOnOverlayClick={false}\r\n                    style={{\r\n                        overlay:{\r\n                            width:700,\r\n                            height:600,\r\n                            backgroundColor:\"rgba(0,0,0,0.8)\",\r\n                            zIndex:\"1000\",\r\n                            top:\"50%\",\r\n                            left:\"50%\",\r\n                            marginTop:\"-300px\",\r\n                            marginLeft:\"-350px\",\r\n                        },\r\n                    }}\r\n                >\r\n                    <div className=\"modal_title\">\r\n                        <h5>Contact Us!</h5>\r\n                    </div>\r\n                    <p style={{color: \"gray\"}}>For all queries, please contact us using the form below.</p>\r\n                    <div className=\"modal_info\">\r\n                        <Avatar className=\"avatar\" src={user.photo}/>\r\n                        <p>{user.displaName ? user.displaName : user.email}</p>\r\n                    </div>\r\n                    <div className=\"modal_Field\">\r\n                        <Input\r\n                                value={inputC}\r\n                                required\r\n                                onChange={(e) => setInputC(e.target.value)}\r\n                                type=\"text\"\r\n                                placeholder=\"How can we help you?\"\r\n                            />\r\n                    </div>\r\n                    <div className=\"modal_buttons\">\r\n                        <button onClick={() => setContactModal(false)} className=\"cancle\">Close</button>\r\n                        <button onClick={handleContact} type=\"submit\" className=\"add\">Submit</button>\r\n                    </div>\r\n                </Modal>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default  Navbar;","import React from 'react';\r\nimport '../css/Quora.css';\r\nimport Feed from './Feed';\r\nimport Navbar from './Navbar';\r\n\r\nfunction Quora() {\r\n    return (\r\n        <div className=\"quora\">\r\n            <Navbar/>\r\n            <div className=\"quora_content\">\r\n                <Feed/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Quora;","import React, { useState } from 'react';\r\nimport './Login.css';\r\nimport {auth,provider} from '../../firebase';\r\nimport logo from './logo.png';\r\n\r\nfunction Login() {\r\n\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const handleLogin = (e) => {\r\n    e.preventDefault();\r\n    auth.signInWithEmailAndPassword(email, password).then((auth) => {\r\n      console.log(auth);\r\n    }).catch((e) => alert(e.message));\r\n    \r\n    setEmail(\"\");\r\n    setPassword(\"\");\r\n  }\r\n  const handleRegister = (e) => {\r\n    e.preventDefault();\r\n    auth.createUserWithEmailAndPassword(email, password).then((auth) => {\r\n        if (auth) {\r\n          console.log(auth);\r\n        }\r\n      }).catch((e) => alert(e.message));\r\n\r\n      setEmail(\"\");\r\n      setPassword(\"\");\r\n  };\r\n\r\n    return (\r\n        <div className=\"login\">\r\n      <div className=\"login__container\">\r\n        <div className=\"login__logo\">\r\n          <img\r\n            src={logo}\r\n            alt=\"lll\"\r\n          />\r\n        </div>\r\n        <div className=\"login__desc\">\r\n          <p>A Place to Share knowledge and better understand the world</p>\r\n          <h3>Quora For EV</h3>\r\n        </div>\r\n        <div className=\"login__auth\">\r\n          <div className=\"login__emailPass\">\r\n            <div className=\"login__label\">\r\n              <h4>Login</h4>\r\n            </div>\r\n            <div className=\"login__inputFields\">\r\n              <div className=\"login__inputField\">\r\n                <input\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n                  type=\"text\"\r\n                  placeholder=\"Email\"\r\n                />\r\n              </div>\r\n              <div className=\"login__inputField\">\r\n                <input\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                  type=\"password\"\r\n                  placeholder=\"Password\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"login__forgButt\">\r\n              <small>Forgot Password?</small>\r\n              <button type='submit' onClick={handleLogin}>Login</button>\r\n              <button className=\"reg_btn\" onClick={handleRegister}>Register</button>\r\n            </div>\r\n            \r\n          </div>\r\n        </div>\r\n        <div className=\"login__footer\">\r\n          <p>About</p>\r\n          <p>Terms</p>\r\n          <p>Contact</p>\r\n          <p>&copy; Quora For EV Inc. 2021</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React, {useEffect} from 'react';\nimport './App.css';\nimport Quora from './component/Quora';\nimport { login, logout, selectUser } from './features/userSlice';\nimport Login from './component/auth/Login';\nimport { useDispatch, shallowEqual, useSelector } from 'react-redux';\nimport { auth } from \"./firebase\";\n\nfunction App() {\n\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    auth.onAuthStateChanged((authUser) => {\n      if(authUser){\n        dispatch(login({\n          uid: authUser.uid,\n          photo: authUser.photoURL,\n          displayName: authUser.displayName,\n          email: authUser.email\n        }));\n        console.log(authUser);\n      } else {\n        dispatch(logout())\n      }\n    });\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      {\n        user ? (<Quora />) : (<Login />)\n        // <Quora />\n      }\n    \n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport userReducer from '../features/userSlice';\nimport questionReducer from '../features/questionSlice';\n\nexport const store = configureStore({\n  reducer: {\n    user: userReducer,\n    question: questionReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}